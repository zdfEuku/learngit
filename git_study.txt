【一】全局配置
git config --global user.name "<ZhangDefu>"

git config --global user.email "<2240493958@qq.com>"

【二】在当前文件夹创建Git仓库repository:   git init
	成功后，会在当前目录中生成 .git文件夹
【三】添加文件：  git add <文件名>
【三、1】 提交： git commit -m "<注释>"

【四】查看仓库的当前状态：  git status
	查看仓库的当前状态（哪些文件有修改）

【五】比较文件：  git diff <文件名> 
   比较工作区和 【已经commit或者add】

【六】修改后提交，仍然是 git add 和 git commit两个命令

【七】显示提交日志:  git log     

【八】 回退到某个版本  git reset --hard <版本号>
	版本号可以是  head^ head^^  head~100

【9】 查看提交历史： git reflog 

【10】 git分为 工作区、 暂存区（index 或 stage）、已提交区
	git add命令是移到暂存区， 
	git commit命令是移动到已提交区

【11】 丢弃工作区的修改  git checkout -- <文件名>     
	就是让这个文件回到最近一次git commit或git add时的状态
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

【12】 把暂存区的修改撤销掉： git reset HEAD <文件名>    
	把暂存区的修改撤销掉（unstage），重新放回工作区
	
【13】删除文件：  git rm <文件名>   。然后   git commit

【14】最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。

【15】 远程仓库 github
	本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
	打开Shell（Windows下打开Git Bash），创建SSH Key
【15.1】ssh-keygen -t rsa -C "youremail@example.com"
	可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	我的git bash 用户主目录是  C:\Users\Administrator
	
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

【16】 添加远程库
第一步： 在github网站上新建一个仓库  ，名字是  learngit
第二部： 在本地的仓库下，运行如下命令。 即把一个已有的本地仓库与新建的github仓库关联，然后，把本地仓库的内容推送到GitHub仓库。
【16.1】  git remote add origin <git@github.com:zdfEuku/learngit.git>
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
第三部：把本地库的所有内容推送到远程库上
【16.2】  git push -u origin master
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

	第四部：以后再推送
	只要本地作了提交，就可以通过命令
【16.3】git push 

【17】从远程库克隆：   git clone <远程库地址>
如：  git clone git@github.com:zdfEuku/triangleIndicate.git

【18】分支管理
【19】 查看分支：  git branch 
	当前分支会标上 *
【20】 创建分支：  git branch <分支名>
【21】 切换到某个分支：   git checkout <分支名>
【21.1】创建并切换到一个新分支：  git checkout -b <分支名>
【22】 合并分支：   git merge <分支名>
	把指定分支合并到当前分支
【23】删除分支：  git branch -d <分支名>
【24】当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成
【25】看到分支合并图：   git log --graph --pretty=oneline --abbrev-commit  
【26】 
	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	也就是 --no-ff方式的git merge
【27】强制禁用Fast forward模式合并分支:    git merge --no-ff -m "<提交代码的注释>" <分支名>
【28】 分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
【29】bug分支
	把当前工作现场“储藏”起来：  git stash
	git stash list
	恢复的同时把stash内容也删了：  git stash pop
	恢复：  git stash apply <stash名> 。     例如 git stash apply stash@{0}
	删除：  git stash drop <stash名>